(*<system.pas>
 * Z80 and MSX related system routines.
 * CopyLeft (c) since 1995 by PopolonY2k.
 *)

(**
  *
  * $Id: system.pas 103 2020-06-17 00:40:53Z popolony2k $
  * $Author: popolony2k $
  * $Date: 2020-06-17 00:40:53 +0000 (Wed, 17 Jun 2020) $
  * $Revision: 103 $
  * $HeadURL: file:///svn/p/oldskooltech/code/msx/trunk/msxdos/pascal/system.pas $
  *)

(*
 * This module depends on folowing include files (respect the order):
 * - systypes.pas;
 *)

(**
  * MSX version return codes.
  *)
Const         ctMSX1    = 0;
              ctMSX2    = 1;
              ctMSX2P   = 2;
              ctMSXTR   = 3;
              ctMSXTRGT = 4;
              ctUnknown = 255;

(**
  * Switched I/O ports.
  *)
Const         ctSwitchedIODevID  = $40;    { Device ID register  }
              ctSwitchedIOStatus = $41;    { Device status       }

(**
  * List of BIOS extension device ID's.
  *)
Const         ctUnknownDevice    = 0;      { Not official        }
              ctASCIIMicrosoft   = 1;
              ctCanon            = 2;
              ctCasio            = 3;
              ctFujitsu          = 4;
              ctGeneral          = 5;
              ctHitachi          = 6;
              ctKyocera          = 7;
              ctMatsushita       = 8;      { Panasonic           }
              ctMitsubishi       = 9;
              ctNEC              = 10;
              ctNipponGakki      = 11;
              ctJVC              = 12;
              ctPhilips          = 13;
              ctPioneer          = 14;
              ctSanyo            = 15;
              ctSharp            = 16;
              ctSony             = 17;
              ctSpectravideo     = 18;
              ctToshiba          = 19;
              ctMitsumi          = 20;
              ctTelematica       = 21;
              ctGradiente        = 22;
              ctSharpBrazil      = 23;
              ctGoldStar         = 24;     { LG - Lucky GoldStar }
              ctDaewoo           = 25;
              ctSamsung          = 26;
              ctImageScanner     = 128;    { Matsushita          }
              ctOneChipZemmixNeo = 212;    { KDL Firmware        }
              ctMPS2             = 254;    { ASCII               }

(**
  * All CPU modes.
  *)
Type TProcessorMode = ( ModeZ80,
                        ModeZ80PanaTurbo,
                        ModeZ80ZemmixTurbo,
                        ModeR800ROM,
                        ModeR800DRAM );



(**
  * Disable Z80 interrupts.
  *)
Procedure DI;
Begin
  InLine( $F3 );
End;

(**
  * Enable Z80 interrupts.
  *)
Procedure EI;
Begin
  InLine( $FB );
End;

(**
  * Get the MSX manufacturer.
  *)
Function GetMSXManufacturer : Byte;
Var
      nDeviceId,
      nCount      : Byte;

Begin
  nCount := ctMPS2;

  While( nCount <> ctUnknownDevice ) Do
  Begin
    Port[ctSwitchedIODevID] := nCount;
    nDeviceId := Not Port[ctSwitchedIODevID];

    If( nDeviceId = nCount )  Then
      nCount := ctUnknownDevice
    Else
    Begin
      Case nCount Of
        ctMPS2             : nCount := ctOneChipZemmixNeo;
        ctOneChipZemmixNeo : nCount := ctImageScanner;
        ctImageScanner     : nCount := ctSamsung;
        Else
        Begin
          nCount    := Pred( nCount );
          nDeviceId := ctUnknownDevice;
        End;
      End;
    End;
  End;

  GetMSXManufacturer := nDeviceId;
End;

(**
  * Return the MSX version that's running.
  *)
Function GetMSXVersion : Byte;
Var
    nModel,
    nMIDI   : Byte;

Begin
  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $3A/$C1/$FC        { LD A,(EXPTBL)  }
          /$21/$2D/$00       { LD HL,MSXMODEL }
          /$CD/$0C/$00       { CALL RDSLT     }
          /$32/nModel        { LD (nModel),A  }
          /$3A/$C1/$FC       { LD A,(EXPTBL)  }
          /$21/$2E/$00       { LD HL,MSXMIDI  }
          /$CD/$0C/$00       { CALL RDSLT     }
          /$32/nMIDI         { LD (nMIDI),A   } );

  If( nMIDI = 1 )  Then
    GetMSXVersion := ctMSXTRGT
  Else
    GetMSXVersion := nModel;
End;

(**
  * Get the computer processor mode/type.
  *)
Function GetProcessorMode : TProcessorMode;
Var
       nMode  : Byte;
       mode   : TProcessorMode;
Begin
  If( GetMSXVersion In [ctMSXTR..ctMSXTRGT] )  Then
  Begin
    (*
     * The ASM routine below is located in the .\ASM\ project folder
     * and was generated by INLASS.
     *)
    Inline(
            $DD/$21/$83/$01  { LD IX,GETCPU   }
            /$FD/$21/$00/$00 { LD IY,0        }
            /$CD/$1C/$00     { CALL CALSLT    }
            /$32/nMode       { LD (nMode),A   } );

    Case nMode Of
      1 : mode := ModeR800ROM;
      2 : mode := ModeR800DRAM;
    Else
      mode := ModeZ80;
    End;
  End
  Else
  Begin
    mode := ModeZ80;

    (* Just consider the existing turbo machines *)
    Case GetMSXManufacturer Of
      ctOneChipZemmixNeo : If( ( Port[ctSwitchedIOStatus] And 1 ) = 0 )  Then
                             mode := ModeZ80PanaTurbo
                           Else  { TODO: Detect Z80Mode and Z80ZemmixTurbo }
                             mode := ModeZ80ZemmixTurbo;

      ctMatsushita       : If( ( Port[ctSwitchedIOStatus] And 1 ) = 0 )  Then
                             mode := ModeZ80PanaTurbo
                           Else
                             mode := ModeZ80;
    End;
  End;

  GetProcessorMode := mode;
End;

(**
  * Get the computer's frequency.
  *)
Function GetHostFrequency : THostInterruptTiming;
Var
       nRet  : Byte;

Begin
  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $3A/$C1/$FC        { LD A,(EXPTBL)  }
          /$21/$2B/$00       { LD HL,SYSINFO  }
          /$CD/$0C/$00       { CALL RDSLT     }
          /$32/nRet          { LD (nRet),A    } );

  If( ( nRet ShR 7 ) = 0 )  Then
    GetHostFrequency := Timing60Hz
  Else
    GetHostFrequency := Timing50Hz;
End;
