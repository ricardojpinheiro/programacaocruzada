(*<math16.pas>
 * Implement extends math functions for use with 16Bit operands.
 * Copyleft (c) since 1995 by PopolonY2k.
 *)

(**
  *
  * $Id: $
  * $Author: $
  * $Date: $
  * $Revision: $
  * $HeadURL: $
  *)

(*
 * This source file depends on following include files (respect the order):
 * -
 *)

(**
  * Return the maximum value of two operands.
  * @param nOp1 The first operand;
  * @param nOp2 The second operand;
  *)
Function Max( nOp1, nOp2 : Integer ) : Integer;
Begin
  If( nOp1 > nOp2 )  Then
    Max := nOp1
  Else
    Max := nOp2;
End;

(**
  * Return the minimum value of two operands.
  * @param nOp1 The first operand;
  * @param nOp2 The second operand;
  *)
Function Min( nOp1, nOp2 : Integer ) : Integer;
Begin
  If( nOp1 < nOp2 )  Then
    Min := nOp1
  Else
    Min := nOp2;
End;

(**
  * Performs an integer division rounding the result as needed;
  * @param nDividend The operation dividend;
  * @param nDivisor The operation divisor;
  *)
Function RoundDiv16( nDividend, nDivisor : Integer ) : Integer;
Var
          nResult     : Integer;
Begin
  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $ED/$4B/nDividend     { DIV16:   LD BC,(nDividend)    }
          /$ED/$5B/nDivisor     {          LD DE,(nDivisor)     }
          /$21/$00/$00          {          LD HL,0              }
          /$78                  {          LD A,B               }
          /$06/$08              {          LD B,8               }
          /$17                  { LOOP1:   RLA                  }
          /$ED/$6A              {          ADC HL,HL            }
          /$ED/$52              {          SBC HL,DE            }
          /$30/$01              {          JR NC,NOADD1         }
          /$19                  {          ADD HL,DE            }
          /$10/$F6              { NOADD1:  DJNZ LOOP1           }
          /$47                  {          LD B,A               }
          /$79                  {          LD A,C               }
          /$48                  {          LD C,B               }
          /$06/$08              {          LD B,8               }
          /$17                  { LOOP2:   RLA                  }
          /$ED/$6A              {          ADC HL,HL            }
          /$ED/$52              {          SBC HL,DE            }
          /$30/$01              {          JR NC,NOADD2         }
          /$19                  {          ADD HL,DE            }
          /$10/$F6              { NOADD2:  DJNZ LOOP2           }
          /$17                  {          RLA                  }
          /$2F                  {          CPL                  }
          /$47                  {          LD B,A               }
          /$79                  {          LD A,C               }
          /$48                  {          LD C,B               }
          /$17                  {          RLA                  }
          /$2F                  {          CPL                  }
          /$47                  {          LD B,A               }
          /$29                  { ROUND:   ADD HL,HL            }
          /$ED/$52              {          SBC HL,DE            }
          /$38/$01              {          JR C,ENDP            }
          /$03                  {          INC BC               }
          /$ED/$43/nResult      { ENDP:    LD (nResult),BC      }
                                {          END                  } );

  RoundDiv16 := nResult;
End;

(**
  * Performs an integer division returning the division's remainder;
  * @param nDividend The operation dividend;
  * @param nDivisor The operation divisor;
  * @param nRemainder Reference to operation's remainder;
  *)
Function Div16( nDividend,
                nDivisor : Integer;
                Var nRemainder : Integer ) : Integer;
Var
          nResult,
          nRest      : Integer;
Begin
  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $ED/$4B/nDividend     { DIV16    LD BC,(nDividend)    }
          /$ED/$5B/nDivisor     {          LD DE,(nDivisor)     }
          /$21/$00/$00          {          LD HL,0              }
          /$78                  {          LD A,B               }
          /$06/$08              {          LD B,8               }
          /$17                  { LOOP1    RLA                  }
          /$ED/$6A              {          ADC HL,HL            }
          /$ED/$52              {          SBC HL,DE            }
          /$30/$01              {          JR NC,NOADD1         }
          /$19                  {          ADD HL,DE            }
          /$10/$F6              { NOADD1   DJNZ LOOP1           }
          /$47                  {          LD B,A               }
          /$79                  {          LD A,C               }
          /$48                  {          LD C,B               }
          /$06/$08              {          LD B,8               }
          /$17                  { LOOP2    RLA                  }
          /$ED/$6A              {          ADC HL,HL            }
          /$ED/$52              {          SBC HL,DE            }
          /$30/$01              {          JR NC,NOADD2         }
          /$19                  {          ADD HL,DE            }
          /$10/$F6              { NOADD2   DJNZ LOOP2           }
          /$17                  {          RLA                  }
          /$2F                  {          CPL                  }
          /$47                  {          LD B,A               }
          /$79                  {          LD A,C               }
          /$48                  {          LD C,B               }
          /$17                  {          RLA                  }
          /$2F                  {          CPL                  }
          /$47                  {          LD B,A               }
          /$22/nRest            {          LD (nRest),HL        }
          /$ED/$43/nResult      {          LD (nResult),BC      } );

  nRemainder := nRest;
  Div16 := nResult;
End;
