(*<maprallc.pas>
 * Memory mapper management implementation using MSXDOS2 EXTBIO calls.
 * CopyLeft (c) since 1995 by PopolonY2k.
 *)

(**
  *
  * $Id: $
  * $Author: $
  * $Date: $
  * $Revision: $
  * $HeadURL: $
  *)

(*
 * This module depends on folowing include files (respect the order):
 * - types.pas;
 * - msxbios.pas;
 * - extbio.pas;
 * - maprbase.pas;
 *)

(**
  * Allocate a memory mapper segment.
  * @param handle The allocated handle by the @see InitMapper routine;
  * @param nSlotId The mapper id that will be allocated;
  * @param segmentType The @see TSegmentType that will be allocated by this
  * function;
  * @param nSegmentId The allocated segment id if the allocation was
  * successfull;
  *)
Function AllocMapperSegment( Var handle     : TMapperHandle;
                             nSlotId        : TSlotNumber;
                             segmentType    : TSegmentType;
                             Var nSegmentId : Byte ) : Boolean;
Var
        nRetCode     : Byte;
        nSegType     : Byte;
        nSegId       : Byte;
        nJmpTblAddr  : Integer;

Begin
  If( segmentType = UserSegment )  Then
    nSegType := 0
  Else
    nSegType := 1;

  nJmpTblAddr := handle.nStartAddrJumpTbl + ctALL_SEG;

  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $21/*+$000E          {       LD HL,retj                   }
          /$E5                 {       PUSH HL                      }
          /$3A/nSlotId         {       LD A,(nSlotId)               }
          /$47                 {       LD B,A                       }
          /$3A/nSegType        {       LD A,(nSegType)              }
          /$2A/nJmpTblAddr     {       LD HL,(nJmpTblAddr)          }
          /$E9                 {       JP (HL)                      }
          /$32/nSegId          { retj: LD (nSegId),A                }
          /$26/$00             {       LD H,0                       }
          /$38/$02             {       JR C,endf                    }
          /$26/$01             {       LD H,1                       }
          /$7C                 { endf: LD A,H                       }
          /$32/nRetCode        {       LD (nRetCode),A              }
                               {       END                          } );

  nSegmentId := nSegId;
  AllocMapperSegment := Boolean( nRetCode );
End;

(**
  * Release an allocated memory mapper segment.
  * @param handle The allocated handle by the @see InitMapper routine;
  * @param nSlotId The mapper id that will be deallocated;
  * @param nSegmentId The mapper id that will be deallocated;
  *)
Function FreeMapperSegment( Var handle : TMapperHandle;
                            nSlotId    : TSlotNumber;
                            nSegmentId : Byte ) : Boolean;
Var
        nRetCode     : Byte;
        nJmpTblAddr  : Integer;

Begin
  nJmpTblAddr := handle.nStartAddrJumpTbl + ctFRE_SEG;

  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   *)
  Inline(
          $21/*+$000E          {       LD HL,retj                   }
          /$E5                 {       PUSH HL                      }
          /$3A/nSlotId         {       LD A,(nSlotId)               }
          /$47                 {       LD B,A                       }
          /$3A/nSegmentId      {       LD A,(nSegmentId)            }
          /$2A/nJmpTblAddr     {       LD HL,(nJmpTblAddr)          }
          /$E9                 {       JP (HL)                      }
          /$26/$00             { retj: LD H,0                       }
          /$38/$02             {       JR C,endf                    }
          /$26/$01             {       LD H,1                       }
          /$7C                 { endf: LD A,H                       }
          /$32/nRetCode        {       LD (nRetCode),A              }
                               {       END                          } );

  FreeMapperSegment := Boolean( nRetCode );
End;
