(*<wait.pas>
 * Implements an accurate wait routine, splitting time into a specific
 * divisor, useful for high frequency music player routines.
 * This module implements a Sleep routine based on VBLANK ticks.
 * CopyLeft (c) since 1995 by PopolonY2k.
 *)

(**
  *
  * $Id: $
  * $Author: $
  * $Date: $
  * $Revision: $
  * $HeadURL: $
  *)

(*
 * This module depends on folowing include files (respect the order):
 * -
 *)

(**
  * Internal module variables.
  *)
Var
           __nRemaining,
           __nWaitInterval,
           __nLastWaitInterval,
           __nFreqDivisor         : Integer;


(**
  * Implements an accurate Sleep function, based on VBlank ticks.
  * @param __nWaitInterval The sleep interval to wait.
  * The parameter above return the extra elapsed time based
  * on __nFreqDivisor parameter;
  *)
Procedure WaitDirect{( __nWaitInterval : Integer )};
Begin
  (*
   * The ASM routine below is located in the .\ASM\ project folder
   * and was generated by INLASS.
   * Source code: asm\system\wait.asm
   *)
  Inline( $2A/__nWaitInterval         {        LD HL,(__nWaitInterval)     }
          /$ED/$4B/__nLastWaitInterval{        LD BC,(__nLastWaitInterval) }
          /$09                        {        ADD HL,BC                   }
          /$22/__nLastWaitInterval    {        LD (__nLastWaitInterval),HL }
          /$ED/$4B/__nRemaining       {        LD BC,(__nRemaining)        }
          /$ED/$42                    {        SBC HL,BC                   }
          /$38/$24                    {        JR C,ENDFN                  }
          /$ED/$5B/__nFreqDivisor     {        LD DE,(__nFreqDivisor)      }
          /$3A/$9E/$FC                { LOOP   LD A,(JIFFY)                }
          /$47                        {        LD B,A                      }
          /$B8                        { WAIT   CP B                        }
          /$3A/$9E/$FC                {        LD A,(JIFFY)                }
          /$28/$FA                    {        JR Z,WAIT                   }
          /$ED/$52                    {        SBC HL,DE                   }
          /$28/$02                    {        JR Z,ENDLOP                 }
          /$30/$F0                    {        JR NC,LOOP                  }
          /$7C                        { ENDLOP LD A,H                      }
          /$2F                        {        CPL                         }
          /$67                        {        LD H,A                      }
          /$7D                        {        LD A,L                      }
          /$2F                        {        CPL                         }
          /$6F                        {        LD L,A                      }
          /$23                        {        INC HL                      }
          /$22/__nRemaining           {        LD (__nRemaining),HL        }
          /$21/$00/$00                {        LD HL,0000H                 }
          /$22/__nLastWaitInterval    {        LD (__nLastWaitInterval),HL }
                                      { ENDFN  END                         } );
End;

(**
  * Set the frequency divisor that will be used by WaitDirect and Wait
  * routines.
  * @param __nFreqDivisor The frequency divisor used to count each sleep
  * interval;
  *)
Procedure SetWaitFreqDivisor( nFreqDivisor : Integer );
Begin
  __nFreqDivisor      := nFreqDivisor;
  __nRemaining        := 0;
  __nWaitInterval     := 0;
  __nLastWaitInterval := 0;
End;

(**
  * Implements an accurate Sleep function, based on VBlank ticks.
  * This procedure is a wrapper to @link WaitDirect;
  * @param nWaitInterval The sleep interval to wait;
  *)
Procedure Wait( Var nWaitInterval : Integer );
Begin
  __nWaitInterval := nWaitInterval;
  WaitDirect{( __nWaitInterval, __nFreqDivisorVbl )};
End;
